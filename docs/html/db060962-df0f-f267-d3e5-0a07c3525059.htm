<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD8&lt;T&gt; Fields</title><meta name="Title" content="Fields" /><meta name="Help.Id" content="Fields.T:Fun.Collections.UniJaggedD8`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="db060962-df0f-f267-d3e5-0a07c3525059" /><meta name="tocFile" content="../toc/IDHA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />8<span id="LST1E28037D_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST1E28037D_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Fields</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="15a477f4-68e0-d551-71d1-9a9e3a0340b7.htm">AsEnumerable</a></td><td>
            Converts the unified jagged collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <p>See below for two-dimensional exmaple.</p>
            Converts the unified jagged collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Func&lt;int, int, bool&gt; underlyingFun = (i, j) =&gt; (i + j) % 2 == 0;
UniJaggedD2&lt;bool&gt; jagged = new(underlyingFun, length1: Some(2), getLength2: Some&lt;Func&lt;int, int&gt;&gt;(_ =&gt; 2));

bool anyEvens = jagged.AsEnumerable().SelectMany(x =&gt; x).Aggregate(false, (x, y) =&gt; x || y);
Assert(anyEvens == true); 

var enumerable = jagged.AsEnumerable();

int i = 0;
for (var values in enumerable)
{
    int j = 0;
    for (var value in values)
    {
        bool expectedValue = (i + j) % 2 == 0;
        Assert(value == expectedValue);
        j++;
    }
    i++;
}</code></pre></div></div></td></tr><tr><td><a href="d0469936-ac30-d691-fd95-3c2ef8044fc7.htm">GetOrNone</a></td><td>
            Safely gets Some of the element at the (i,j,k,l,m,n,o,p)-th position; returns None if the indices are invalid.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.GetOrNone(1, 0, 3, 1, 0, 3, 0, 5) == Some(5));
Assert(jagged.GetOrNone(1, 0, 3, 1, 0, 3, 0, 7).IsNone);
Assert(jagged.GetOrNone(4, 0, 0, 0, 0, 0, 0, 0).IsNone);</code></pre></div></div>
            
            For other methods on the resulting optional, see <span class="noLink">Opt</span>.
            </td></tr><tr><td><a href="66d7823e-82d3-ecd7-21b6-e81f11671300.htm">Length1</a></td><td>
            Length of the jagged collection in the first dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length1() == 4);</code></pre></div></div></td></tr><tr><td><a href="87286c7d-a2cd-4193-99b9-9855f2476611.htm">Length2</a></td><td>
            Length of the jagged collection in the second dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length2(0) == 1);
Assert(jagged.Length2(1) == 1); // jagged[1] is array2, having a length of 1
Assert(jagged.Length2(2) == 3);
Assert(jagged.Length2(3) == 7);</code></pre></div></div></td></tr><tr><td><a href="02e720b0-0c16-0ef3-e848-f49dc37e5340.htm">Length3</a></td><td>
            Length of the jagged collection in the third dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length3(1, 0) == 5);  // jagged[1][0] is array3, having a length of 5</code></pre></div></div></td></tr><tr><td><a href="856d4498-5985-47fb-8ea0-6bab16880c0d.htm">Length4</a></td><td>
            Length of the jagged collection in the fourth dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length4(1, 0, 3) == 3);  // jagged[1][0][3] is array4, having a length of 3</code></pre></div></div></td></tr><tr><td><a href="dfa996ef-9d6b-fb3b-6ee0-788d04135dd0.htm">Length5</a></td><td>
            Length of the jagged collection in the fifth dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length5(1, 0, 3, 1) == 2);  // jagged[1][0][3][1] is array5, having a length of 2</code></pre></div></div></td></tr><tr><td><a href="cdfb14b1-2f3b-3615-c572-92e2a3000176.htm">Length6</a></td><td>
            Length of the jagged collection in the sixth dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length6(1, 0, 3, 1, 0) == 4);  // jagged[1][0][3][1] is array6, having a length of 4</code></pre></div></div></td></tr><tr><td><a href="bf3641ce-49da-17ca-9d54-bff7752b4b24.htm">Length7</a></td><td>
            Length of the jagged collection in the seventh dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length7(1, 0, 3, 1, 0, 3) == 1);  // jagged[1][0][3][1][3] is array7, having a length of 1</code></pre></div></div></td></tr><tr><td><a href="62e3faa8-9776-1ee6-b6b8-91906391ba19.htm">Length8</a></td><td>
            Length of the jagged collection in the eighth dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array8 = new int[7] { 0, 1, 2, 3, 4, 5, 6 };
var array7 = new int[1][] { array8 };
var array6 = new int[4][][] { new int[1][], new int[2][], new int[5][], array7 };
var array5 = new int[2][][][] { array6, new int[5][][] };
var array4 = new int[3][][][][] { new int[2][][][], array5, new int[3][][][] };
var array3 = new int[5][][][][][] { new int[1][][][][], new int[4][][][][], new int[6][][][][], array4, new int[1][][][][] };
var array2 = new int[1][][][][][][] { array3 };
var array1 = new int[4][][][][][][][] { new int[1][][][][][][], array2, new int[3][][][][][][], new int[7][][][][][][] };
UniJaggedD8&lt;int&gt; jagged = new(array1);

Assert(jagged.Length8(1, 0, 3, 1, 0, 3, 0) == 7);  // jagged[1][0][3][1][3][0] is array8, having a length of 7</code></pre></div></div></td></tr><tr><td><a href="3d00b77e-31ca-e76a-a71d-c79e60be6052.htm">UnderlyingScalar</a></td><td>
    
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3ce141b7-b056-4967-464f-1d10e6a1b556.htm">HasUnderlyingScalar</a> is true; and the field <a href="3bf6fffc-dade-cef8-eb21-49ab8b5c3600.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i, j] = 10, for all i, j.
UniJaggedD2&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3, 2] == 10 and jaggedConst[42, 0] == 10);
Assert(jaggedConst.GetOrNone(12, 4) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD2&lt;int&gt; jaggedAny = new(new int[] { int[] { 10, 11, 12 } });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="4afa5067-7039-32f2-d7f8-ba21f2c2dd64.htm">UniJaggedD8<span id="LST1E28037D_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E28037D_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span> Class</a></div><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>