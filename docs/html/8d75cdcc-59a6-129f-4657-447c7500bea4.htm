<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD1&lt;T&gt; Constructor</title><meta name="Title" content="Constructors" /><meta name="Help.Id" content="Overload:Fun.Collections.UniJaggedD1`1.#ctor" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="8d75cdcc-59a6-129f-4657-447c7500bea4" /><meta name="tocFile" content="../toc/IDAA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />1<span id="LST135EE73_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST135EE73_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Constructor</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overload List</h2><div id="IDACASection"><table id="OverloadList" class="table is-hoverable"><tr><td><a href="0426400c-1f3b-03a3-a8ae-42a3e1bcb691.htm">UniJaggedD1<span id="LST135EE73_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IEnumerable<span id="LST135EE73_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST135EE73_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">enumerable</span>.
            
            <p>
            Note that underlying Count() method is used to determine Length1 of the collection.
            This means that, it might require linear search if the underlying collection does not have a trivial count.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IEnumerable&lt;char&gt; enumerable = new List&lt;char&gt;() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(enumerable);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="28c45ede-6cc5-4fe8-ec4a-937e29ecc3d5.htm">UniJaggedD1<span id="LST135EE73_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LST135EE73_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST135EE73_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IList&lt;char&gt; list = new List&lt;char&gt;() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="acf436f0-52b5-2828-ccca-e0408f5a2d68.htm">UniJaggedD1<span id="LST135EE73_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LST135EE73_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST135EE73_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var list = new List&lt;char&gt;() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="282d9e7a-41fd-2ba2-6ea7-5ba26cca6431.htm">UniJaggedD1<span id="LST135EE73_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Memory)</a></td><td>Initializes a new instance of the <a href="184ff2f8-4129-ea4e-ca5c-0fad58680850.htm">UniJaggedD1<span id="LST135EE73_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> class</td></tr><tr><td><a href="889e3f73-76fc-7fd0-aca6-9a2ffb310188.htm">UniJaggedD1<span id="LST135EE73_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(ReadOnlyMemory)</a></td><td>Initializes a new instance of the <a href="184ff2f8-4129-ea4e-ca5c-0fad58680850.htm">UniJaggedD1<span id="LST135EE73_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> class</td></tr><tr><td><a href="0885a6a1-4c86-7ce0-ffa4-1d96c589cd10.htm">UniJaggedD1<span id="LST135EE73_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LST135EE73_24" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST135EE73_25" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[] { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="68852416-f13a-c28d-d591-1f40c8df6a50.htm">UniJaggedD1<span id="LST135EE73_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Func<span id="LST135EE73_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST135EE73_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LST135EE73_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST135EE73_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection with optional length, values of which are determined by the <span class="parameter">getValue</span> function.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int Factorial(int number) { .. }

UniJaggedD1&lt;int&gt; factorials = new(Factorial);
Assert(factorials.Length1() == int.MaxValue); // since length1 is omitted
Assert(factorials[3] == 6);
Assert(factorials[5] == 120);

UniJaggedD1&lt;int&gt; factorialsUpTo4 = new(Factorial, Some(4));
Assert(factorialsUpTo4.Length1() == 4);
Assert(factorialsUpTo4[3] == 6);
// Assert(factorialsUpTo4[5] == 120); // out-of-bounds, throws!
Assert(factorialsUpTo4.GetOrNone(5).IsNone);</code></pre></div></div></td></tr><tr><td><a href="5b2ad89d-13d9-8551-fbcf-86e26f6fe04d.htm">UniJaggedD1<span id="LST135EE73_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(T, Opt<span id="LST135EE73_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST135EE73_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection with optional length, which always yields the same constant value.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var agentSmith = GetSmith();
UniJaggedD1&lt;Agent&gt; jagged = new(agentSmith);
Assert(jagged.Length1() == int.MaxValue); // since length1 is omitted
Assert(jagged[0] == agentSmith);
Assert(jagged[42] == agentSmith);
Assert(jagged.GetOrNone(100) == Some(agentSmith));

UniJaggedD1&lt;Agent&gt; jagged = new(agentSmith, Some(50));
Assert(jagged.Length1() == 50);
Assert(jagged[0] == agentSmith);
Assert(jagged[42] == agentSmith);
Assert(jagged.GetOrNone(100).IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="184ff2f8-4129-ea4e-ca5c-0fad58680850.htm">UniJaggedD1<span id="LST135EE73_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST135EE73_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span> Class</a></div><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overload List</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>