<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD5&lt;T&gt; Class</title><meta name="Title" content="UniJaggedD5&lt;T&gt;" /><meta name="Help.Id" content="T:Fun.Collections.UniJaggedD5`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="c3fd5e0b-90d6-003e-f1e1-3068bee2b928" /><meta name="Description" content="A unified 5-dimensional collection. Can be considered as a union of common collections. Takes a functional approach; i.e." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />5<span id="LSTDD5A4453_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTDD5A4453_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Class</h1><div class="summary">
            A unified 5-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>Length4(i,j,k): length of the (i,j,k)-th collection.</li><li>Length5(i,j,k,l): length of the (i,j,k,l)-th collection.</li><li>this[i]: i-th D4 collection.</li><li>this[i,j,k,l,m]: element at the (i,j,k,l,m)-th position.</li><li>GetOrNone(i,j,k,l,m): returns Some of the element at the (i,j,k,l,m)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections</a><br /><strong>Assembly:</strong> Fun.Collections.UniJagged (in Fun.Collections.UniJagged.dll) Version: 6.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">UniJaggedD5</span>&lt;T&gt;
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">UniJaggedD5<span id="LSTDD5A4453_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd><p class="missing">[Missing &lt;typeparam name="T"/&gt; documentation for "T:Fun.Collections.UniJaggedD5`1"]</p></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAIFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="fa943663-38bb-b298-b416-a4c66b009273.htm">UniJaggedD5<span id="LSTDD5A4453_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IEnumerable<span id="LSTDD5A4453_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LSTDD5A4453_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LSTDD5A4453_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LSTDD5A4453_9" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LSTDD5A4453_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A4453_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_14" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            5-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">enumerable</span>.
            
            <p>
            Note that underlying Count() method is used to determine lengths of the collections.
            This means that, it might require linear search if the underlying collections do not have a trivial counts.
            </p><p>See <a href="cf2d6810-a118-4414-091c-958f0630088e.htm">UniJaggedD2<span id="LSTDD5A4453_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IEnumerable<span id="LSTDD5A4453_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LSTDD5A4453_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A4453_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for two-dimensional examples.</p></td></tr><tr><td><a href="a6b5bd31-ca17-42f8-3324-3d14c6791f78.htm">UniJaggedD5<span id="LSTDD5A4453_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LSTDD5A4453_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IList<span id="LSTDD5A4453_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IList<span id="LSTDD5A4453_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IList<span id="LSTDD5A4453_27" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IList<span id="LSTDD5A4453_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A4453_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            5-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <p>See <a href="eaec2398-8161-aeeb-d995-dd05f68d6686.htm">UniJaggedD2<span id="LSTDD5A4453_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LSTDD5A4453_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A4453_37" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A4453_38" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for two-dimensional examples.</p></td></tr><tr><td><a href="be1dd56a-a8f6-d666-4413-f76704aa229b.htm">UniJaggedD5<span id="LSTDD5A4453_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LSTDD5A4453_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A4453_43" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A4453_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A4453_45" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A4453_46" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A4453_47" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_48" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_49" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_50" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_51" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            5-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <p>See <a href="eaec2398-8161-aeeb-d995-dd05f68d6686.htm">UniJaggedD2<span id="LSTDD5A4453_52" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_53" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LSTDD5A4453_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A4453_55" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A4453_56" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for two-dimensional examples.</p></td></tr><tr><td><a href="94c7603b-2c01-4489-5792-9dd01a3f8686.htm">UniJaggedD5<span id="LSTDD5A4453_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A4453_60" data-languageSpecificText="cpp=array&lt;"></span><span id="LSTDD5A4453_61" data-languageSpecificText="cpp=array&lt;"></span><span id="LSTDD5A4453_62" data-languageSpecificText="cpp=array&lt;"></span><span id="LSTDD5A4453_63" data-languageSpecificText="cpp=array&lt;"></span><span id="LSTDD5A4453_64" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A4453_65" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A4453_66" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A4453_67" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A4453_68" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A4453_69" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            5-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <p>See <a href="07f19525-e3ca-81d9-8795-d6b64c9433c9.htm">UniJaggedD2<span id="LSTDD5A4453_70" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_71" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A4453_72" data-languageSpecificText="cpp=array&lt;"></span><span id="LSTDD5A4453_73" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A4453_74" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A4453_75" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a> for two-dimensional examples.</p></td></tr><tr><td><a href="292361f1-fbff-33ce-982f-42ab26a90502.htm">UniJaggedD5<span id="LSTDD5A4453_76" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_77" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A4453_78" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A4453_79" data-languageSpecificText="cpp=,5&gt;|cs=[,,,,]|vb=(,,,,)|nu=[,,,,]|fs=[,,,,]"></span>)</a></td><td>
            5-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <p>See <a href="b765be17-2151-d614-dce5-c7ff5619c070.htm">UniJaggedD2<span id="LSTDD5A4453_80" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_81" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A4453_82" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A4453_83" data-languageSpecificText="cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]"></span>)</a> for two-dimensional examples.</p></td></tr><tr><td><a href="352ff694-bd4c-3377-1817-018387a12932.htm">UniJaggedD5<span id="LSTDD5A4453_84" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_85" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Func<span id="LSTDD5A4453_86" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32, Int32, T<span id="LSTDD5A4453_87" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_88" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A4453_89" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_90" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_91" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LSTDD5A4453_92" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_93" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_94" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_95" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32<span id="LSTDD5A4453_96" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_97" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_98" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_99" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32<span id="LSTDD5A4453_100" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_101" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_102" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_103" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32, Int32<span id="LSTDD5A4453_104" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_105" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            5-dimensional jagged collection with optional lengths, values of which are determined by the <span class="parameter">getValue</span> function.
            
            <p>See <a href="9a1bf8d9-0653-5cb9-fb13-a69119a5505b.htm">UniJaggedD2<span id="LSTDD5A4453_106" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_107" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Func<span id="LSTDD5A4453_108" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LSTDD5A4453_109" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_110" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A4453_111" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_112" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_113" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LSTDD5A4453_114" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_115" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for two-dimensional examples.</p></td></tr><tr><td><a href="09011ea1-ec96-54c1-864b-e287f0dcbcc6.htm">UniJaggedD5<span id="LSTDD5A4453_116" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_117" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(T, Opt<span id="LSTDD5A4453_118" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A4453_119" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_120" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_121" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LSTDD5A4453_122" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_123" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_124" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_125" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32<span id="LSTDD5A4453_126" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_127" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_128" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_129" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32<span id="LSTDD5A4453_130" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_131" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_132" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_133" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32, Int32<span id="LSTDD5A4453_134" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_135" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            5-dimensional jagged collection with optional lengths, which always yields the same constant value.
            
            <p>See <a href="ceb8bd08-1fb7-f129-124d-c2cb4113681c.htm">UniJaggedD2<span id="LSTDD5A4453_136" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A4453_137" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(T, Opt<span id="LSTDD5A4453_138" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A4453_139" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A4453_140" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A4453_141" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LSTDD5A4453_142" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A4453_143" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for two-dimensional examples.</p></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDPFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="bc300e46-512f-f25c-ea87-9701e3d24af3.htm">HasUnderlyingScalar</a></td><td>
    
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3ce141b7-b056-4967-464f-1d10e6a1b556.htm">HasUnderlyingScalar</a> is true; and the field <a href="3bf6fffc-dade-cef8-eb21-49ab8b5c3600.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i, j] = 10, for all i, j.
UniJaggedD2&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3, 2] == 10 and jaggedConst[42, 0] == 10);
Assert(jaggedConst.GetOrNone(12, 4) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD2&lt;int&gt; jaggedAny = new(new int[] { int[] { 10, 11, 12 } });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr><tr><td><a href="59ecab2c-47a5-18ea-7fd5-494326faf3e7.htm">Item<span id="LSTDD5A4453_144" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>Int32<span id="LSTDD5A4453_145" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a></td><td>
            Returns the <span class="parameter">i</span>-th D4 collection.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

int i = 0;
UniJaggedD4&lt;char&gt; jaggedI = jagged[i];
Assert(jaggedI.Length1() == jagged.Length2(i) == 2);
Assert(jaggedI[0, 1, 2] == jagged[0, 0, 1, 2] == 2);</code></pre></div></div></td></tr><tr><td><a href="4e3922cc-7cfe-611c-9cce-a29918ff5d55.htm">Item<span id="LSTDD5A4453_146" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>Int32, Int32, Int32, Int32, Int32<span id="LSTDD5A4453_147" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a></td><td>
            Directly returns the element at the (i,j,k,l,m)-th position.
            Use <a href="e9a3de10-42c7-9847-b271-e598cc802bf7.htm">GetOrNone</a> for the bound-checked optional version.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged[0, 0, 1, 0, 2] == 2);
// var number = jagged[0, 0, 1, 0, 4]; // out-of-bounds, throws!
// var number = jagged[3, 0, 0, 0, 0]; // out-of-bounds, throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDJFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAFASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="57aa7b3a-b975-ce19-6894-9f1af7500878.htm">AsEnumerable</a></td><td>
            Converts the unified jagged collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <p>See below for two-dimensional exmaple.</p>
            Converts the unified jagged collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Func&lt;int, int, bool&gt; underlyingFun = (i, j) =&gt; (i + j) % 2 == 0;
UniJaggedD2&lt;bool&gt; jagged = new(underlyingFun, length1: Some(2), getLength2: Some&lt;Func&lt;int, int&gt;&gt;(_ =&gt; 2));

bool anyEvens = jagged.AsEnumerable().SelectMany(x =&gt; x).Aggregate(false, (x, y) =&gt; x || y);
Assert(anyEvens == true); 

var enumerable = jagged.AsEnumerable();

int i = 0;
for (var values in enumerable)
{
    int j = 0;
    for (var value in values)
    {
        bool expectedValue = (i + j) % 2 == 0;
        Assert(value == expectedValue);
        j++;
    }
    i++;
}</code></pre></div></div></td></tr><tr><td><a href="e9a3de10-42c7-9847-b271-e598cc802bf7.htm">GetOrNone</a></td><td>
            Safely gets Some of the element at the (i,j,k,l,m)-th position; returns None if the indices are invalid.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged.GetOrNone(0, 0, 1, 0, 2) == Some(2));
Assert(jagged.GetOrNone(0, 0, 1, 0, 4).IsNone);
Assert(jagged.GetOrNone(3, 0, 0, 0, 0).IsNone);</code></pre></div></div>
            
            For other methods on the resulting optional, see <span class="noLink">Opt</span>.
            </td></tr><tr><td><a href="f8ac4026-a84c-6d96-88c6-5d7f5e26b9eb.htm">Length1</a></td><td>
            Length of the jagged collection in the first dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged.Length1() == 2);</code></pre></div></div></td></tr><tr><td><a href="bd6b5941-64fd-cd4a-7228-333602173a04.htm">Length2</a></td><td>
            Length of the jagged collection in the second dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged.Length2(1) == 0);</code></pre></div></div></td></tr><tr><td><a href="84891a8a-ebf3-5a8e-6bb5-24f55656d63b.htm">Length3</a></td><td>
            Length of the jagged collection in the second dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged.Length3(0, 0) == 2);</code></pre></div></div></td></tr><tr><td><a href="967ad11f-304c-badb-bd00-f470a3eb13f7.htm">Length4</a></td><td>
            Length of the jagged collection in the second dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged.Length4(0, 0, 1) == 1);</code></pre></div></div></td></tr><tr><td><a href="b3bcf5f1-a296-d729-951d-eff1ed64d235.htm">Length5</a></td><td>
            Length of the jagged collection in the second dimension.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new int[2][][][][]
{
   new int[1][][][]
   {
       new int[2][][]
       {
           new int[3][]
           {
               new int[2] { 0, 1 },
               new int[3] { 2, 3, 4 },
               Array.Empty&lt;int&gt;(),
           },
           new int[1][]
           {
               new int[4] { 0, 1, 2, 3 },
           }
       }
   },
   Array.Empty&lt;int[][][]&gt;()
};
UniJaggedD5&lt;int&gt; jagged = new(array);

Assert(jagged.Length5(0, 0, 0, 1) == 3);</code></pre></div></div></td></tr><tr><td><a href="6e014c97-c5b7-5e12-8b58-dbecb6da02f6.htm">UnderlyingScalar</a></td><td>
    
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3ce141b7-b056-4967-464f-1d10e6a1b556.htm">HasUnderlyingScalar</a> is true; and the field <a href="3bf6fffc-dade-cef8-eb21-49ab8b5c3600.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i, j] = 10, for all i, j.
UniJaggedD2&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3, 2] == 10 and jaggedConst[42, 0] == 10);
Assert(jaggedConst.GetOrNone(12, 4) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD2&lt;int&gt; jaggedAny = new(new int[] { int[] { 10, 11, 12 } });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>