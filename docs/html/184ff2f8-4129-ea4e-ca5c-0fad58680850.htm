<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD1&lt;T&gt; Class</title><meta name="Title" content="UniJaggedD1&lt;T&gt;" /><meta name="Help.Id" content="T:Fun.Collections.UniJaggedD1`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="184ff2f8-4129-ea4e-ca5c-0fad58680850" /><meta name="Description" content="A unified 1-dimensional collection. Can be considered as a union of common collections. Takes a functional approach; i.e." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />1<span id="LSTDD5A444F_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTDD5A444F_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Class</h1><div class="summary">
            A unified 1-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the length;</li><li>closure to get element at the given index (also the bounds-checked version GetOrNone, in addition to direct access by index);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value, and have a length of 1000 elements;
            there will not be an underlying array storing the same value 1000 times.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[] underlyingArray = new int[] { 0, 1, 2 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1] == 1 and jagged[1] == 1);
underlyingArray[1] = 42;
Assert(underlyingArray[1] == 42 and jagged[1] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;char&gt; underlyingList = new() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(underlyingList);
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);
underlyingList.Add('d');
Assert(underlyingList.Count == 4 and jagged.Length1() == 4);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length in the first dimension.</li><li>this[i]: element at the i-th position.</li><li>GetOrNone(i): returns Some of the element at the i-th position if the index is valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections</a><br /><strong>Assembly:</strong> Fun.Collections.UniJagged (in Fun.Collections.UniJagged.dll) Version: 6.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">UniJaggedD1</span>&lt;T&gt;
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">UniJaggedD1<span id="LSTDD5A444F_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd><p class="missing">[Missing &lt;typeparam name="T"/&gt; documentation for "T:Fun.Collections.UniJaggedD1`1"]</p></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAEFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="0426400c-1f3b-03a3-a8ae-42a3e1bcb691.htm">UniJaggedD1<span id="LSTDD5A444F_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IEnumerable<span id="LSTDD5A444F_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444F_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">enumerable</span>.
            
            <p>
            Note that underlying Count() method is used to determine Length1 of the collection.
            This means that, it might require linear search if the underlying collection does not have a trivial count.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IEnumerable&lt;char&gt; enumerable = new List&lt;char&gt;() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(enumerable);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="28c45ede-6cc5-4fe8-ec4a-937e29ecc3d5.htm">UniJaggedD1<span id="LSTDD5A444F_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LSTDD5A444F_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444F_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IList&lt;char&gt; list = new List&lt;char&gt;() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="acf436f0-52b5-2828-ccca-e0408f5a2d68.htm">UniJaggedD1<span id="LSTDD5A444F_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LSTDD5A444F_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444F_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var list = new List&lt;char&gt;() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="282d9e7a-41fd-2ba2-6ea7-5ba26cca6431.htm">UniJaggedD1<span id="LSTDD5A444F_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Memory)</a></td><td>Initializes a new instance of the <span class="selflink">UniJaggedD1<span id="LSTDD5A444F_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span> class</td></tr><tr><td><a href="889e3f73-76fc-7fd0-aca6-9a2ffb310188.htm">UniJaggedD1<span id="LSTDD5A444F_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(ReadOnlyMemory)</a></td><td>Initializes a new instance of the <span class="selflink">UniJaggedD1<span id="LSTDD5A444F_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span> class</td></tr><tr><td><a href="0885a6a1-4c86-7ce0-ffa4-1d96c589cd10.htm">UniJaggedD1<span id="LSTDD5A444F_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A444F_26" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A444F_27" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            1-dimensional jagged collection length and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[] { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 3);
Assert(jagged[2] == 'c');
Assert(jagged.GetOrNone(0) == Some('a'));
Assert(jagged.GetOrNone(3).IsNone);</code></pre></div></div></td></tr><tr><td><a href="68852416-f13a-c28d-d591-1f40c8df6a50.htm">UniJaggedD1<span id="LSTDD5A444F_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Func<span id="LSTDD5A444F_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LSTDD5A444F_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A444F_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A444F_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection with optional length, values of which are determined by the <span class="parameter">getValue</span> function.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int Factorial(int number) { .. }

UniJaggedD1&lt;int&gt; factorials = new(Factorial);
Assert(factorials.Length1() == int.MaxValue); // since length1 is omitted
Assert(factorials[3] == 6);
Assert(factorials[5] == 120);

UniJaggedD1&lt;int&gt; factorialsUpTo4 = new(Factorial, Some(4));
Assert(factorialsUpTo4.Length1() == 4);
Assert(factorialsUpTo4[3] == 6);
// Assert(factorialsUpTo4[5] == 120); // out-of-bounds, throws!
Assert(factorialsUpTo4.GetOrNone(5).IsNone);</code></pre></div></div></td></tr><tr><td><a href="5b2ad89d-13d9-8551-fbcf-86e26f6fe04d.htm">UniJaggedD1<span id="LSTDD5A444F_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444F_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(T, Opt<span id="LSTDD5A444F_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A444F_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            1-dimensional jagged collection with optional length, which always yields the same constant value.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var agentSmith = GetSmith();
UniJaggedD1&lt;Agent&gt; jagged = new(agentSmith);
Assert(jagged.Length1() == int.MaxValue); // since length1 is omitted
Assert(jagged[0] == agentSmith);
Assert(jagged[42] == agentSmith);
Assert(jagged.GetOrNone(100) == Some(agentSmith));

UniJaggedD1&lt;Agent&gt; jagged = new(agentSmith, Some(50));
Assert(jagged.Length1() == 50);
Assert(jagged[0] == agentSmith);
Assert(jagged[42] == agentSmith);
Assert(jagged.GetOrNone(100).IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDLFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="3fc9e72e-07a9-4f1e-1384-6340506361bc.htm">HasUnderlyingScalar</a></td><td>
    
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3fc9e72e-07a9-4f1e-1384-6340506361bc.htm">HasUnderlyingScalar</a> is true; and the field <a href="7389c667-c3b6-77c5-394e-5ccb394226ee.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i] = 10, for all i.
UniJaggedD1&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3] == 10 and jaggedConst[42] == 10);
Assert(jaggedConst.GetOrNone(12) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD1&lt;int&gt; jaggedAny = new(new int[] { 10, 11, 12 });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr><tr><td><a href="efd898b0-b428-f370-4606-9b7dcf4426e7.htm">Item</a></td><td>
            Directly returns the element at the i-th position.
            Use <a href="ff345153-2e85-1491-38ec-823e12c791d2.htm">GetOrNone</a> for the bound-checked optional version.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingArray = new int[] { 10, 11, 12 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingArray);

Assert(jagged[1] == 11);

// var x = jagged[-1]; =&gt; out-of-bounds, throws!
// var x = jagged[3]; =&gt; out-of-bounds, throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDFFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAFASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="35791be9-2f1b-7c61-fe38-ab900954afb1.htm">AsEnumerable</a></td><td>
            Converts the unified collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Func&lt;int, bool&gt; underlyingFun = i =&gt; i % 2 == 0;
UniJaggedD1&lt;bool&gt; jagged = new(underlyingFun, length1: Some(4));

bool anyEvens = jagged.AsEnumerable().Aggregate(false, (x, y) =&gt; x || y);
Assert(anyEvens == true);

var enumerable = jagged.AsEnumerable();

int counter = 0;
for (var isEven in enumerable)
{
    Assert(isEven == counter % 2 == 0);
    counter++;
}</code></pre></div></div></td></tr><tr><td><a href="ff345153-2e85-1491-38ec-823e12c791d2.htm">GetOrNone</a></td><td>
            Safely gets the element at the i-th position; returns None if the index is invalid.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingArray = new int[] { 10, 11, 12 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingArray);

Assert(jagged.GetOrNone(1) == Some(11));
Assert(jagged.GetOrNone(-1).IsNone);
Assert(jagged.GetOrNone(2).IsNone);</code></pre></div></div>
            
            For other methods on the resulting optional, see <span class="noLink">Opt</span>.
            </td></tr><tr><td><a href="2ebbd552-5199-deba-fcec-bbcc1533e686.htm">Length1</a></td><td>
            Length of the jagged array.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingList = new List&lt;int&gt; { 10, 11, 12 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingList);
Assert(jagged.Length1() == 3);

Func&lt;int, bool&gt; underlyingFun = i =&gt; i % 2 == 0;
UniJaggedD1&lt;bool&gt; jagged = new(underlyingFun, length1: Some(4));
Assert(jagged.Length1() == 4);

Func&lt;int, bool&gt; underlyingFun = i =&gt; i % 2 == 0;
UniJaggedD1&lt;Agent&gt; bool = new(underlyingFun); // omitted optional argument 'length1' defaults to None -&gt; no limit
Assert(jagged.Length1() == int.MaxValue);</code></pre></div></div></td></tr><tr><td><a href="7389c667-c3b6-77c5-394e-5ccb394226ee.htm">UnderlyingScalar</a></td><td>
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3fc9e72e-07a9-4f1e-1384-6340506361bc.htm">HasUnderlyingScalar</a> is true; and the field <a href="7389c667-c3b6-77c5-394e-5ccb394226ee.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i] = 10, for all i.
UniJaggedD1&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3] == 10 and jaggedConst[42] == 10);
Assert(jaggedConst.GetOrNone(12) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD1&lt;int&gt; jaggedAny = new(new int[] { 10, 11, 12 });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>