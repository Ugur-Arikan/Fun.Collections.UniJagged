<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD1&lt;T&gt; Fields</title><meta name="Title" content="Fields" /><meta name="Help.Id" content="Fields.T:Fun.Collections.UniJaggedD1`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="331fba7c-443f-ac7a-cbf1-3647bfe98276" /><meta name="tocFile" content="../toc/IDAA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />1<span id="LST4B5037D_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST4B5037D_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Fields</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="35791be9-2f1b-7c61-fe38-ab900954afb1.htm">AsEnumerable</a></td><td>
            Converts the unified collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Func&lt;int, bool&gt; underlyingFun = i =&gt; i % 2 == 0;
UniJaggedD1&lt;bool&gt; jagged = new(underlyingFun, length1: Some(4));

bool anyEvens = jagged.AsEnumerable().Aggregate(false, (x, y) =&gt; x || y);
Assert(anyEvens == true);

var enumerable = jagged.AsEnumerable();

int counter = 0;
for (var isEven in enumerable)
{
    Assert(isEven == counter % 2 == 0);
    counter++;
}</code></pre></div></div></td></tr><tr><td><a href="ff345153-2e85-1491-38ec-823e12c791d2.htm">GetOrNone</a></td><td>
            Safely gets the element at the i-th position; returns None if the index is invalid.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingArray = new int[] { 10, 11, 12 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingArray);

Assert(jagged.GetOrNone(1) == Some(11));
Assert(jagged.GetOrNone(-1).IsNone);
Assert(jagged.GetOrNone(2).IsNone);</code></pre></div></div>
            
            For other methods on the resulting optional, see <span class="noLink">Opt</span>.
            </td></tr><tr><td><a href="2ebbd552-5199-deba-fcec-bbcc1533e686.htm">Length1</a></td><td>
            Length of the jagged array.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingList = new List&lt;int&gt; { 10, 11, 12 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingList);
Assert(jagged.Length1() == 3);

Func&lt;int, bool&gt; underlyingFun = i =&gt; i % 2 == 0;
UniJaggedD1&lt;bool&gt; jagged = new(underlyingFun, length1: Some(4));
Assert(jagged.Length1() == 4);

Func&lt;int, bool&gt; underlyingFun = i =&gt; i % 2 == 0;
UniJaggedD1&lt;Agent&gt; bool = new(underlyingFun); // omitted optional argument 'length1' defaults to None -&gt; no limit
Assert(jagged.Length1() == int.MaxValue);</code></pre></div></div></td></tr><tr><td><a href="7389c667-c3b6-77c5-394e-5ccb394226ee.htm">UnderlyingScalar</a></td><td>
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3fc9e72e-07a9-4f1e-1384-6340506361bc.htm">HasUnderlyingScalar</a> is true; and the field <a href="7389c667-c3b6-77c5-394e-5ccb394226ee.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i] = 10, for all i.
UniJaggedD1&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3] == 10 and jaggedConst[42] == 10);
Assert(jaggedConst.GetOrNone(12) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD1&lt;int&gt; jaggedAny = new(new int[] { 10, 11, 12 });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="184ff2f8-4129-ea4e-ca5c-0fad58680850.htm">UniJaggedD1<span id="LST4B5037D_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4B5037D_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span> Class</a></div><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>