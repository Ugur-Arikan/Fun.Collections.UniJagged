<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD2&lt;T&gt; Constructor</title><meta name="Title" content="Constructors" /><meta name="Help.Id" content="Overload:Fun.Collections.UniJaggedD2`1.#ctor" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="0a13b6f6-2721-5aea-304f-e3297117c81f" /><meta name="tocFile" content="../toc/IDBA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />2<span id="LST4868EE73_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST4868EE73_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Constructor</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overload List</h2><div id="IDACASection"><table id="OverloadList" class="table is-hoverable"><tr><td><a href="cf2d6810-a118-4414-091c-958f0630088e.htm">UniJaggedD2<span id="LST4868EE73_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IEnumerable<span id="LST4868EE73_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST4868EE73_5" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST4868EE73_6" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">enumerable</span>.
            
            <p>
            Note that underlying Count() method is used to determine Length1 and Length2 of the collections.
            This means that, it might require linear search if the underlying collections do not have a trivial counts.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IEnumerable&lt;IEnumerable&lt;char&gt;&gt; enumerable = new List&lt;List&lt;char&gt;&gt;() { new() { 'a', 'b', 'c' }, new() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(enumerable);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="1f54cd46-7f66-7832-f4dc-3dd321f25912.htm">UniJaggedD2<span id="LST4868EE73_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LST4868EE73_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LST4868EE73_11" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST4868EE73_12" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST4868EE73_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IList&lt;IList&lt;char&gt;&gt; list = new List&lt;List&lt;char&gt;&gt;() { new List&lt;char&gt;() { 'a', 'b', 'c' }, new List&lt;char&gt;() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="f8556f5d-e052-a463-ade3-27f69f61694b.htm">UniJaggedD2<span id="LST4868EE73_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LST4868EE73_16" data-languageSpecificText="cpp=array&lt;"></span>IList<span id="LST4868EE73_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST4868EE73_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_19" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="0c4386f9-baac-a03c-843b-f9cec82848e3.htm">UniJaggedD2<span id="LST4868EE73_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LST4868EE73_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IList<span id="LST4868EE73_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST4868EE73_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IList&lt;IList&lt;char&gt;&gt; list = new List&lt;List&lt;char&gt;&gt;() { new List&lt;char&gt;() { 'a', 'b', 'c' }, new List&lt;char&gt;() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="ac571ca7-1487-451f-3fc5-da2cb0eae325.htm">UniJaggedD2<span id="LST4868EE73_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LST4868EE73_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LST4868EE73_29" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST4868EE73_30" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST4868EE73_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="8fa47b84-fe25-da72-b3b9-b8cd1b757a0f.htm">UniJaggedD2<span id="LST4868EE73_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LST4868EE73_34" data-languageSpecificText="cpp=array&lt;"></span>List<span id="LST4868EE73_35" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST4868EE73_36" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_37" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="eaec2398-8161-aeeb-d995-dd05f68d6686.htm">UniJaggedD2<span id="LST4868EE73_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LST4868EE73_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LST4868EE73_41" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST4868EE73_42" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var list = new List&lt;List&lt;char&gt;&gt;() { new() { 'a', 'b', 'c' }, new() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="07f19525-e3ca-81d9-8795-d6b64c9433c9.htm">UniJaggedD2<span id="LST4868EE73_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LST4868EE73_46" data-languageSpecificText="cpp=array&lt;"></span><span id="LST4868EE73_47" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST4868EE73_48" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST4868EE73_49" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="b765be17-2151-d614-dce5-c7ff5619c070.htm">UniJaggedD2<span id="LST4868EE73_50" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_51" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LST4868EE73_52" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST4868EE73_53" data-languageSpecificText="cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[2, 3] { { 'a', 'b', 'c' }, { 'd', 'e', 'f' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 3);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="9a1bf8d9-0653-5cb9-fb13-a69119a5505b.htm">UniJaggedD2<span id="LST4868EE73_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Func<span id="LST4868EE73_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST4868EE73_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LST4868EE73_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST4868EE73_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LST4868EE73_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LST4868EE73_61" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LST4868EE73_62" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_63" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection with optional lengths, values of which are determined by the <span class="parameter">getValue</span> function.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int GetDistance(int from, int to) { return Math.Abs(to - from); }

UniJaggedD2&lt;int&gt; distances = new(GetDistance);
Assert(distances.Length1() == int.MaxValue);    // since length1 is omitted
Assert(distances.Length2(100) == int.MaxValue); // since length2 is omitted
Assert(distances[1, 2] == 1);
Assert(distances[10, 5] == 5);

UniJaggedD2&lt;int&gt; distancesUpTo4 = new(GetDistance, Some(4));
Assert(distancesUpTo4.Length1() == 4);
Assert(distancesUpTo4[3, 1] == 2);
// Assert(distancesUpTo4[5, 1] == 4); // out-of-bounds, throws!
Assert(distancesUpTo4.GetOrNone(5, 1).IsNone);

UniJaggedD2&lt;int&gt; distancesUpTo4 = new(GetDistance, Some(4), Some&lt;Func&lt;int, int&gt;&gt;(i =&gt; 2*i));
Assert(distancesUpTo4.Length1() == 4);
Assert(distancesUpTo4.Length2(2) == 4);
Assert(distancesUpTo4[3, 5] == 2);
// Assert(distancesUpTo4[3, 6] == 3); // out-of-bounds, throws!
// Assert(distancesUpTo4[4, 0] == 4); // out-of-bounds, throws!
Assert(distancesUpTo4.GetOrNone(3, 6).IsNone);  // since Length2(3) is 6, index 6 is out of bounds.
Assert(distancesUpTo4.GetOrNone(4, 0).IsNone);  // since Length1() is 4, index 4 is out of bounds.</code></pre></div></div></td></tr><tr><td><a href="ceb8bd08-1fb7-f129-124d-c2cb4113681c.htm">UniJaggedD2<span id="LST4868EE73_64" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_65" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(T, Opt<span id="LST4868EE73_66" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST4868EE73_67" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LST4868EE73_68" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LST4868EE73_69" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LST4868EE73_70" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST4868EE73_71" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection with optional lengths, which always yields the same constant value.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var agentSmith = GetSmith();
UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith);
Assert(jagged.Length1() == int.MaxValue);   // since length1 is omitted
Assert(jagged.Length2(42) == int.MaxValue); // since length2 is omitted
Assert(jagged[0][0] == agentSmith);
Assert(jagged[42][42] == agentSmith);
Assert(jagged.GetOrNone(100, 42) == Some(agentSmith));

UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith, Some(50));
Assert(jagged.Length1() == 50);
Assert(jagged.Length2(42) == int.MaxValue); // since length2 is omitted
Assert(jagged[0][0] == agentSmith);
Assert(jagged[42][142] == agentSmith);
Assert(jagged.GetOrNone(100, 2).IsNone);

UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith, Some(50), Some&lt;Func&lt;int, int&gt;&gt;(_ =&gt; 2));
Assert(jagged.Length1() == 50);
Assert(jagged.Length2(42) == 2);
Assert(jagged[0][0] == agentSmith);
Assert(jagged[42][1] == agentSmith);
Assert(jagged.GetOrNone(0, 2).IsNone);
Assert(jagged.GetOrNone(50, 0).IsNone);

UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith, Some(50), Some&lt;Func&lt;int, int&gt;&gt;(i =&gt; i));
Assert(jagged.Length1() == 50);
Assert(jagged.Length2(0) == 0);
Assert(jagged.Length2(42) == 42);
Assert(jagged[42][1] == agentSmith);
Assert(jagged.GetOrNone(1, 0) == Some(agentSmith));
Assert(jagged.GetOrNone(0, 0).IsNone);
Assert(jagged.GetOrNone(50, 0).IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="53ac1a69-c551-9959-62d7-c70d5bc4668b.htm">UniJaggedD2<span id="LST4868EE73_72" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST4868EE73_73" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span> Class</a></div><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overload List</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>