<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Fun.Collections Namespace</title><meta name="Title" content="Fun.Collections" /><meta name="Help.Id" content="N:Fun.Collections" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2" /><meta name="Description" content="Jagged array representations, wrapping different underlying data types by a functional approach in order to achieve a unified collection type." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Fun.<wbr />Collections Namespace</h1><div class="summary">
            Jagged array representations, wrapping different underlying data types by a functional approach in order to achieve a unified collection type.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Classes</h2><div id="IDACASection"><table id="classList" class="table is-hoverable"><tr><td><a href="184ff2f8-4129-ea4e-ca5c-0fad58680850.htm">UniJaggedD1<span id="LSTABB771B2_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 1-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the length;</li><li>closure to get element at the given index (also the bounds-checked version GetOrNone, in addition to direct access by index);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value, and have a length of 1000 elements;
            there will not be an underlying array storing the same value 1000 times.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[] underlyingArray = new int[] { 0, 1, 2 };
UniJaggedD1&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1] == 1 and jagged[1] == 1);
underlyingArray[1] = 42;
Assert(underlyingArray[1] == 42 and jagged[1] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;char&gt; underlyingList = new() { 'a', 'b', 'c' };
UniJaggedD1&lt;char&gt; jagged = new(underlyingList);
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);
underlyingList.Add('d');
Assert(underlyingList.Count == 4 and jagged.Length1() == 4);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length in the first dimension.</li><li>this[i]: element at the i-th position.</li><li>GetOrNone(i): returns Some of the element at the i-th position if the index is valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="53ac1a69-c551-9959-62d7-c70d5bc4668b.htm">UniJaggedD2<span id="LSTABB771B2_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 2-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            and have a length of 1000 collections in the first dimension,
            and 1000 elements in the second dimension for each of the collection;
            there will NOT be an underlying array storing the same value 1_000_000 times.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length in the first dimension (i.e., number of 1D collections).</li><li>Length2(i): length of the i-th collection in the second dimension (i.e., number of elements in the i-th 1D collection).</li><li>this[i]: i-th D1 collection.</li><li>this[i,j]: element at the (i,j)-th position (i.e., j-th element of the i-th 1D collection).</li><li>GetOrNone(i, j): returns Some of the element at the (i,j)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="cb7528fb-f997-a2c4-0532-cd04605f6322.htm">UniJaggedD3<span id="LSTABB771B2_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 3-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>this[i]: i-th D2 collection.</li><li>this[i,j,k]: element at the (i,j,k)-th position.</li><li>GetOrNone(i,j,k): returns Some of the element at the (i,j,k)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="bd3822ba-b039-2b63-b75f-07ebc5a69fc4.htm">UniJaggedD4<span id="LSTABB771B2_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 4-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>Length4(i,j,k): length of the (i,j,k)-th collection.</li><li>this[i]: i-th D3 collection.</li><li>this[i,j,k,l]: element at the (i,j,k,l)-th position.</li><li>GetOrNone(i,j,k,l): returns Some of the element at the (i,j,k,l)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="c3fd5e0b-90d6-003e-f1e1-3068bee2b928.htm">UniJaggedD5<span id="LSTABB771B2_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 5-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>Length4(i,j,k): length of the (i,j,k)-th collection.</li><li>Length5(i,j,k,l): length of the (i,j,k,l)-th collection.</li><li>this[i]: i-th D4 collection.</li><li>this[i,j,k,l,m]: element at the (i,j,k,l,m)-th position.</li><li>GetOrNone(i,j,k,l,m): returns Some of the element at the (i,j,k,l,m)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="d54a3b67-5a2a-8526-24d6-742566d19ba3.htm">UniJaggedD6<span id="LSTABB771B2_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 6-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>Length4(i,j,k): length of the (i,j,k)-th collection.</li><li>Length5(i,j,k,l): length of the (i,j,k,l)-th collection.</li><li>Length6(i,j,k,l,m): length of the (i,j,k,l,m)-th collection.</li><li>this[i]: i-th D5 collection.</li><li>this[i,j,k,l,m,n]: element at the (i,j,k,l,m,n)-th position.</li><li>GetOrNone(i,j,k,l,m,n): returns Some of the element at the (i,j,k,l,m,n)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="c77342a0-a3b4-67de-3102-24204c80e96f.htm">UniJaggedD7<span id="LSTABB771B2_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 7-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>Length4(i,j,k): length of the (i,j,k)-th collection.</li><li>Length5(i,j,k,l): length of the (i,j,k,l)-th collection.</li><li>Length6(i,j,k,l,m): length of the (i,j,k,l,m)-th collection.</li><li>Length7(i,j,k,l,m,n): length of the (i,j,k,l,m,n)-th collection.</li><li>this[i]: i-th D6 collection.</li><li>this[i,j,k,l,m,n,o]: element at the (i,j,k,l,m,n,o)-th position.</li><li>GetOrNone(i,j,k,l,m,n,o): returns Some of the element at the (i,j,k,l,m,n,o)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr><tr><td><a href="4afa5067-7039-32f2-d7f8-ba21f2c2dd64.htm">UniJaggedD8<span id="LSTABB771B2_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTABB771B2_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            A unified 7-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            or to yield results computed by a function,
            there will NOT be an underlying storage actually storing the values.
            Similarly, if arrays or lists are used as the underlying data sources, the unified collection only holds a reference through the closures.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists for 2D collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length of the collections in the first dimension.</li><li>Length2(i): length of the i-th collection.</li><li>Length3(i,j): length of the (i,j)-th collection.</li><li>Length4(i,j,k): length of the (i,j,k)-th collection.</li><li>Length5(i,j,k,l): length of the (i,j,k,l)-th collection.</li><li>Length6(i,j,k,l,m): length of the (i,j,k,l,m)-th collection.</li><li>Length7(i,j,k,l,m,n): length of the (i,j,k,l,m,n)-th collection.</li><li>Length7(i,j,k,l,m,n,o): length of the (i,j,k,l,m,n,o)-th collection.</li><li>this[i]: i-th D7 collection.</li><li>this[i,j,k,l,m,n,o,p]: element at the (i,j,k,l,m,n,o,p)-th position.</li><li>GetOrNone(i,j,k,l,m,n,o,p): returns Some of the element at the (i,j,k,l,m,n,o,p)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></td></tr></table></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Classes</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>