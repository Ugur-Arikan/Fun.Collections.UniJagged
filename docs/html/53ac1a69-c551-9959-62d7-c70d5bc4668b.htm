<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>UniJaggedD2&lt;T&gt; Class</title><meta name="Title" content="UniJaggedD2&lt;T&gt;" /><meta name="Help.Id" content="T:Fun.Collections.UniJaggedD2`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Fun.Collections" /><meta name="guid" content="53ac1a69-c551-9959-62d7-c70d5bc4668b" /><meta name="Description" content="A unified 2-dimensional collection. Can be considered as a union of common collections. Takes a functional approach; i.e." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Fun.Collections.UniJagged: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Uni<wbr />Jagged<wbr />D<wbr />2<span id="LSTDD5A444C_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTDD5A444C_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Class</h1><div class="summary">
            A unified 2-dimensional collection.
            Can be considered as a union of common collections.
            
            <p>
            Takes a functional approach; i.e., the following closures are defined and stored on construction:
            <ul><li>closure to get the jagged lengths in all dimensions;</li><li>closure to get element at the given indices (also the bounds-checked version GetOrNone, in addition to direct access by indices);</li><li>closure to get the collection as IEnumerable.</li></ul>
            The allocation is limited by these closures.
            The data is not re-allocated, or memoized.
            </p><p>
            For instance, if a unified collection is defined to always return a contant value,
            and have a length of 1000 collections in the first dimension,
            and 1000 elements in the second dimension for each of the collection;
            there will NOT be an underlying array storing the same value 1_000_000 times.
            </p><p>To clarify that the unified collection only holds a reference, consider the following example.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(underlyingArray[1][0] == 1 and jagged[1, 0] == 1);
underlyingArray[1][0] = 42;
Assert(underlyingArray[1][0] == 42 and jagged[1, 0] == 42);</code></pre></div></div><p>To further illustrate, consider the following with underlying list of lists.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">List&lt;List&lt;char&gt;&gt; underlyingList = new() { new() { 'a', 'b', 'c', 'd' }, new() { 'u', 'v' } };
UniJaggedD2&lt;char&gt; jagged = new(underlyingList);

Assert(underlyingList.Count == 2 and jagged.Length1() == 2);
underlyingList.Add(new() { 'x', 'y', 'z' });
Assert(underlyingList.Count == 3 and jagged.Length1() == 3);

Assert(underlyingList[0].Count == 4 and jagged.Length2(0) == 4);
underlyingList[0].Add('e');
Assert(underlyingList[0].Count == 5 and jagged.Length2(0) == 5);</code></pre></div></div><p>The unified jagged collection exposes a unified interface for the following methods:</p><ul><li>Length1(): length in the first dimension (i.e., number of 1D collections).</li><li>Length2(i): length of the i-th collection in the second dimension (i.e., number of elements in the i-th 1D collection).</li><li>this[i]: i-th D1 collection.</li><li>this[i,j]: element at the (i,j)-th position (i.e., j-th element of the i-th 1D collection).</li><li>GetOrNone(i, j): returns Some of the element at the (i,j)-th position if indices are valid; None otherwise.</li><li>AsEnumerable(): returns the collection as IEnumerable; particularly useful for linq calls over the collection.</li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections</a><br /><strong>Assembly:</strong> Fun.Collections.UniJagged (in Fun.Collections.UniJagged.dll) Version: 6.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">UniJaggedD2</span>&lt;T&gt;
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">UniJaggedD2<span id="LSTDD5A444C_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd><p class="missing">[Missing &lt;typeparam name="T"/&gt; documentation for "T:Fun.Collections.UniJaggedD2`1"]</p></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAFFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="cf2d6810-a118-4414-091c-958f0630088e.htm">UniJaggedD2<span id="LSTDD5A444C_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IEnumerable<span id="LSTDD5A444C_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LSTDD5A444C_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444C_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">enumerable</span>.
            
            <p>
            Note that underlying Count() method is used to determine Length1 and Length2 of the collections.
            This means that, it might require linear search if the underlying collections do not have a trivial counts.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IEnumerable&lt;IEnumerable&lt;char&gt;&gt; enumerable = new List&lt;List&lt;char&gt;&gt;() { new() { 'a', 'b', 'c' }, new() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(enumerable);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="1f54cd46-7f66-7832-f4dc-3dd321f25912.htm">UniJaggedD2<span id="LSTDD5A444C_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LSTDD5A444C_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LSTDD5A444C_13" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A444C_14" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A444C_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IList&lt;IList&lt;char&gt;&gt; list = new List&lt;List&lt;char&gt;&gt;() { new List&lt;char&gt;() { 'a', 'b', 'c' }, new List&lt;char&gt;() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="f8556f5d-e052-a463-ade3-27f69f61694b.htm">UniJaggedD2<span id="LSTDD5A444C_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A444C_18" data-languageSpecificText="cpp=array&lt;"></span>IList<span id="LSTDD5A444C_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444C_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_21" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="0c4386f9-baac-a03c-843b-f9cec82848e3.htm">UniJaggedD2<span id="LSTDD5A444C_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(IList<span id="LSTDD5A444C_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IList<span id="LSTDD5A444C_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444C_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IList&lt;IList&lt;char&gt;&gt; list = new List&lt;List&lt;char&gt;&gt;() { new List&lt;char&gt;() { 'a', 'b', 'c' }, new List&lt;char&gt;() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="ac571ca7-1487-451f-3fc5-da2cb0eae325.htm">UniJaggedD2<span id="LSTDD5A444C_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LSTDD5A444C_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LSTDD5A444C_31" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A444C_32" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A444C_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="8fa47b84-fe25-da72-b3b9-b8cd1b757a0f.htm">UniJaggedD2<span id="LSTDD5A444C_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A444C_36" data-languageSpecificText="cpp=array&lt;"></span>List<span id="LSTDD5A444C_37" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444C_38" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_39" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
    
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="eaec2398-8161-aeeb-d995-dd05f68d6686.htm">UniJaggedD2<span id="LSTDD5A444C_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(List<span id="LSTDD5A444C_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>List<span id="LSTDD5A444C_43" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTDD5A444C_44" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">list</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var list = new List&lt;List&lt;char&gt;&gt;() { new() { 'a', 'b', 'c' }, new() { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(list);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="07f19525-e3ca-81d9-8795-d6b64c9433c9.htm">UniJaggedD2<span id="LSTDD5A444C_46" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_47" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A444C_48" data-languageSpecificText="cpp=array&lt;"></span><span id="LSTDD5A444C_49" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A444C_50" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTDD5A444C_51" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 1);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="b765be17-2151-d614-dce5-c7ff5619c070.htm">UniJaggedD2<span id="LSTDD5A444C_52" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_53" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(<span id="LSTDD5A444C_54" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTDD5A444C_55" data-languageSpecificText="cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]"></span>)</a></td><td>
            2-dimensional jagged collection lengths and values of which are determined by the underlying <span class="parameter">array</span>.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[2, 3] { { 'a', 'b', 'c' }, { 'd', 'e', 'f' } };
UniJaggedD2&lt;char&gt; jagged = new(array);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 3);
Assert(jagged.Length2(1) == 3);
Assert(jagged[0, 2] == 'c');
Assert(jagged.GetOrNone(1, 0) == Some('d'));
Assert(jagged.GetOrNone(0, 3).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);</code></pre></div></div></td></tr><tr><td><a href="9a1bf8d9-0653-5cb9-fb13-a69119a5505b.htm">UniJaggedD2<span id="LSTDD5A444C_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Func<span id="LSTDD5A444C_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LSTDD5A444C_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A444C_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A444C_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A444C_62" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A444C_63" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LSTDD5A444C_64" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_65" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection with optional lengths, values of which are determined by the <span class="parameter">getValue</span> function.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int GetDistance(int from, int to) { return Math.Abs(to - from); }

UniJaggedD2&lt;int&gt; distances = new(GetDistance);
Assert(distances.Length1() == int.MaxValue);    // since length1 is omitted
Assert(distances.Length2(100) == int.MaxValue); // since length2 is omitted
Assert(distances[1, 2] == 1);
Assert(distances[10, 5] == 5);

UniJaggedD2&lt;int&gt; distancesUpTo4 = new(GetDistance, Some(4));
Assert(distancesUpTo4.Length1() == 4);
Assert(distancesUpTo4[3, 1] == 2);
// Assert(distancesUpTo4[5, 1] == 4); // out-of-bounds, throws!
Assert(distancesUpTo4.GetOrNone(5, 1).IsNone);

UniJaggedD2&lt;int&gt; distancesUpTo4 = new(GetDistance, Some(4), Some&lt;Func&lt;int, int&gt;&gt;(i =&gt; 2*i));
Assert(distancesUpTo4.Length1() == 4);
Assert(distancesUpTo4.Length2(2) == 4);
Assert(distancesUpTo4[3, 5] == 2);
// Assert(distancesUpTo4[3, 6] == 3); // out-of-bounds, throws!
// Assert(distancesUpTo4[4, 0] == 4); // out-of-bounds, throws!
Assert(distancesUpTo4.GetOrNone(3, 6).IsNone);  // since Length2(3) is 6, index 6 is out of bounds.
Assert(distancesUpTo4.GetOrNone(4, 0).IsNone);  // since Length1() is 4, index 4 is out of bounds.</code></pre></div></div></td></tr><tr><td><a href="ceb8bd08-1fb7-f129-124d-c2cb4113681c.htm">UniJaggedD2<span id="LSTDD5A444C_66" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTDD5A444C_67" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(T, Opt<span id="LSTDD5A444C_68" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LSTDD5A444C_69" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Opt<span id="LSTDD5A444C_70" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Func<span id="LSTDD5A444C_71" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LSTDD5A444C_72" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTDD5A444C_73" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            2-dimensional jagged collection with optional lengths, which always yields the same constant value.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var agentSmith = GetSmith();
UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith);
Assert(jagged.Length1() == int.MaxValue);   // since length1 is omitted
Assert(jagged.Length2(42) == int.MaxValue); // since length2 is omitted
Assert(jagged[0][0] == agentSmith);
Assert(jagged[42][42] == agentSmith);
Assert(jagged.GetOrNone(100, 42) == Some(agentSmith));

UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith, Some(50));
Assert(jagged.Length1() == 50);
Assert(jagged.Length2(42) == int.MaxValue); // since length2 is omitted
Assert(jagged[0][0] == agentSmith);
Assert(jagged[42][142] == agentSmith);
Assert(jagged.GetOrNone(100, 2).IsNone);

UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith, Some(50), Some&lt;Func&lt;int, int&gt;&gt;(_ =&gt; 2));
Assert(jagged.Length1() == 50);
Assert(jagged.Length2(42) == 2);
Assert(jagged[0][0] == agentSmith);
Assert(jagged[42][1] == agentSmith);
Assert(jagged.GetOrNone(0, 2).IsNone);
Assert(jagged.GetOrNone(50, 0).IsNone);

UniJaggedD2&lt;Agent&gt; jagged = new(agentSmith, Some(50), Some&lt;Func&lt;int, int&gt;&gt;(i =&gt; i));
Assert(jagged.Length1() == 50);
Assert(jagged.Length2(0) == 0);
Assert(jagged.Length2(42) == 42);
Assert(jagged[42][1] == agentSmith);
Assert(jagged.GetOrNone(1, 0) == Some(agentSmith));
Assert(jagged.GetOrNone(0, 0).IsNone);
Assert(jagged.GetOrNone(50, 0).IsNone);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDMFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="3ce141b7-b056-4967-464f-1d10e6a1b556.htm">HasUnderlyingScalar</a></td><td>
    
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3ce141b7-b056-4967-464f-1d10e6a1b556.htm">HasUnderlyingScalar</a> is true; and the field <a href="3bf6fffc-dade-cef8-eb21-49ab8b5c3600.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i, j] = 10, for all i, j.
UniJaggedD2&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3, 2] == 10 and jaggedConst[42, 0] == 10);
Assert(jaggedConst.GetOrNone(12, 4) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD2&lt;int&gt; jaggedAny = new(new int[] { int[] { 10, 11, 12 } });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr><tr><td><a href="1b784f07-2cad-105d-562b-9d623699c0ac.htm">Item<span id="LSTDD5A444C_74" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>Int32<span id="LSTDD5A444C_75" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a></td><td>
            Returns the <span class="parameter">i</span>-th D1 collection.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var array = new char[][] { new char[] { 'a', 'b', 'c' }, new char[] { 'd' } };
UniJaggedD2&lt;char&gt; jagged2 = new(array);

UniJaggedD1&lt;char&gt; jagged1 = jagged2[0];
Assert(jagged1.Length1() == jagged2.Length2(0) == 3);
Assert(jagged1[2] == jagged2[0, 2] == 'c');</code></pre></div></div></td></tr><tr><td><a href="d91c28c5-3795-cb43-307b-4e2350cf1133.htm">Item<span id="LSTDD5A444C_76" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>Int32, Int32<span id="LSTDD5A444C_77" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a></td><td>
            Directly returns the element at the (i,j)-th position.
            Use <a href="41341960-37cd-dccf-18b7-f4b69ae32ee6.htm">GetOrNone</a> for the bound-checked optional version.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int[][] underlyingArray = new int[] { new int[] { 0, 10 }, new int[] { 1, 11, 111, 1111 }, new int[] { 2, 22, 222 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(jagged[1, 0] == 1);
Assert(jagged[2, 2] == 222);
// var x = jagged[-1, 0]; =&gt; out-of-bounds, throws!
// var x = jagged[1, 4]; =&gt; out-of-bounds, throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDGFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAFASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="4d30a475-b5d8-165a-ab47-2c5ddebd9671.htm">AsEnumerable</a></td><td>
            Converts the unified jagged collection to IEnumerable yielding its underlying values.
            Particularly useful for linq calls over the collection.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Func&lt;int, int, bool&gt; underlyingFun = (i, j) =&gt; (i + j) % 2 == 0;
UniJaggedD2&lt;bool&gt; jagged = new(underlyingFun, length1: Some(2), getLength2: Some&lt;Func&lt;int, int&gt;&gt;(_ =&gt; 2));

bool anyEvens = jagged.AsEnumerable().SelectMany(x =&gt; x).Aggregate(false, (x, y) =&gt; x || y);
Assert(anyEvens == true); 

var enumerable = jagged.AsEnumerable();

int i = 0;
for (var values in enumerable)
{
    int j = 0;
    for (var value in values)
    {
        bool expectedValue = (i + j) % 2 == 0;
        Assert(value == expectedValue);
        j++;
    }
    i++;
}</code></pre></div></div></td></tr><tr><td><a href="41341960-37cd-dccf-18b7-f4b69ae32ee6.htm">GetOrNone</a></td><td>
            Safely gets Some of the element at the (i,j)-th position; returns None if the indices are invalid.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingArray = new int[] { new int[] { 0 }, new int[] { 1, 2, 3 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingArray);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 1);
Assert(jagged.Length2(1) == 3);

Assert(jagged.GetOrNone(0, 0) == Some(0));
Assert(jagged.GetOrNone(1, 2) == Some(3));
Assert(jagged.GetOrNone(-1, 0).IsNone);
Assert(jagged.GetOrNone(2, 0).IsNone);
Assert(jagged.GetOrNone(0, 1).IsNone);
Assert(jagged.GetOrNone(1, -1).IsNone);
Assert(jagged.GetOrNone(1, 3).IsNone);</code></pre></div></div>
            
            For other methods on the resulting optional, see <span class="noLink">Opt</span>.
            </td></tr><tr><td><a href="c1f8681c-d4f5-6221-458c-79fcd21e4a2d.htm">Length1</a></td><td>
            Length of the jagged array in the first dimension; i.e., number of 1D collections.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingList = new List&lt;List&lt;int&gt;&gt; { new() { 1 }, new() { 2, 3 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingList);
Assert(jagged.Length1() == 2);

Func&lt;int, int, bool&gt; underlyingFun = (i, j) =&gt; (i + j) % 2 == 0;
UniJaggedD2&lt;bool&gt; jagged = new(underlyingFun, length1: Some(4));
Assert(jagged.Length1() == 4);

UniJaggedD2&lt;Agent&gt; bool = new(underlyingFun); // omitted optional argument 'length1' defaults to None -&gt; no limit
Assert(jagged.Length1() == int.MaxValue);</code></pre></div></div></td></tr><tr><td><a href="a03f3b3e-3118-6168-0496-eb6ed9fe94ba.htm">Length2</a></td><td>
            Length of the jagged array in the first dimension; i.e., number of 1D collections.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var underlyingList = new List&lt;List&lt;int&gt;&gt; { new() { 1 }, new() { 2, 3, 4 } };
UniJaggedD2&lt;int&gt; jagged = new(underlyingList);
Assert(jagged.Length1() == 2);
Assert(jagged.Length2(0) == 1);
Assert(jagged.Length2(1) == 3);

Func&lt;int, int, bool&gt; underlyingFun = (i, j) =&gt; (i + j) % 2 == 0;
UniJaggedD2&lt;bool&gt; upperTriangular = new(underlyingFun, length1: Some(3), getLength2: Some&lt;Func&lt;int, int&gt;&gt;(i =&gt; i + 1));
Assert(jagged.Length1() == 3);
Assert(jagged.Length2(0) == 1);
Assert(jagged.Length2(1) == 2);
Assert(jagged.Length2(2) == 3);

UniJaggedD2&lt;Agent&gt; bool = new(underlyingFun, length1: Some(2)); // omitted optional argument 'length2' defaults to None -&gt; no limit
Assert(jagged.Length2(0) == jagged.Length2(1) == int.MaxValue);</code></pre></div></div></td></tr><tr><td><a href="3bf6fffc-dade-cef8-eb21-49ab8b5c3600.htm">UnderlyingScalar</a></td><td>
            The unified collection might be constructed with a constant scalar value; hence, returning the scalar for all indices.
            If this is the case, <a href="3ce141b7-b056-4967-464f-1d10e6a1b556.htm">HasUnderlyingScalar</a> is true; and the field <a href="3bf6fffc-dade-cef8-eb21-49ab8b5c3600.htm">UnderlyingScalar</a> equals to Some of the underlying scalar value.
            <p>Otherwise, HasUnderlyingScalar is false and UnderlyingScalar.IsNone.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// jaggedConst[i, j] = 10, for all i, j.
UniJaggedD2&lt;int&gt; jaggedConst = new(10);
Assert(jaggedConst[3, 2] == 10 and jaggedConst[42, 0] == 10);
Assert(jaggedConst.GetOrNone(12, 4) == Some(10));

// underlying constant can be obtained by the optional UnderlyingScalar field.
Assert(jaggedConst.HasUnderlyingScalar);
Assert(jaggedConst.UnderlyingScalar.IsSome);
Assert(jaggedConst.UnderlyingScalar == Some(10));
Assert(jaggedConst.UnderlyingScalar.Unwrap() == 10);

// jaggedAny, on the other hand, is constructed by any underlying data other than a scalar constant.
UniJaggedD2&lt;int&gt; jaggedAny = new(new int[] { int[] { 10, 11, 12 } });
Assert(jaggedAny.HasUnderlyingScalar == false);
Assert(jaggedAny.UnderlyingScalar.IsNone);
// var scalar = jaggedAny.UnderlyingScalar.Unwrap(); // throws!</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c9b8119a-3ce1-e7e9-1a37-0ce9b12c1ca2.htm">Fun.Collections Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>